// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Single file generation should produce the correct output: Index Content 1`] = `
"import SwaggerPetstore from './SwaggerPetstore';

export { SwaggerPetstore };
"
`;

exports[`Single file generation should produce the correct output: Models Content 1`] = `
"/// This file is generated. Do not edit it directly.

//#region Additional Models
//#endregion Additional Models

//#region Models
interface Order {
	id?: number;
	petId?: number;
	quantity?: number;
	shipDate?: string;
	status?: string;
	complete?: boolean;
}

interface Category {
	id?: number;
	name?: string;
}

interface User {
	id?: number;
	username?: string;
	firstName?: string;
	lastName?: string;
	email?: string;
	password?: string;
	phone?: string;
	userStatus?: number;
}

interface Tag {
	id?: number;
	name?: string;
}

interface Pet {
	id?: number;
	category?: Category;
	name: string;
	photoUrls: Array<string>;
	tags?: Array<Tag>;
	status?: string;
}

interface ApiResponse {
	code?: number;
	type?: string;
	message?: string;
}

//#endregion Models

//#region Parameter Objects
interface petRequest {
	body: Pet;
}

interface findByStatusRequest {
	status: Array<string>;
}

interface findByTagsRequest {
	tags: Array<string>;
}

interface petRequest {
	petId: number;
}

interface uploadImageRequest {
	petId: number;
	additionalMetadata?: string;
	file?: file;
}

interface orderRequest {
	body: Order;
}

interface orderRequest {
	orderId: number;
}

interface userRequest {
	body: User;
}

interface createWithArrayRequest {
	body: Array<User>;
}

interface createWithListRequest {
	body: Array<User>;
}

interface loginRequest {
	username: string;
	password: string;
}

interface userRequest {
	username: string;
}

//#endregion Parameters Objects
"
`;

exports[`Single file generation should produce the correct output: Single File Content 1`] = `
"import Axios, { AxiosRequestConfig } from 'axios';

export default class SwaggerPetstore {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(config: AxiosRequestConfig = {}) {
		const baseUrl = process.env.API_BASE_URL;

		if (baseUrl === undefined)
			throw new Error(\`Cannot construct a \${SwaggerPetstore} because process.env.API_BASE_URL is undefined\`);

		this.baseUrl = baseUrl;
		this.config = config;
	}

	public async pet(request: petRequest): Promise<void> {
		const path = '/pet';

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async findByStatus(request: findByStatusRequest): Promise<Array<Pet>> {
		const path = '/pet/findByStatus';

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {
				status: request.status,
			},
		});
	}

	public async findByTags(request: findByTagsRequest): Promise<Array<Pet>> {
		const path = '/pet/findByTags';

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {
				tags: request.tags,
			},
		});
	}

	public async pet(request: petRequest): Promise<Pet> {
		let path = '/pet/{petId}';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async uploadImage(request: uploadImageRequest): Promise<ApiResponse> {
		let path = '/pet/{petId}/uploadImage';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async inventory(): Promise<object> {
		const path = '/store/inventory';

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,
		});
	}

	public async order(request: orderRequest): Promise<Order> {
		const path = '/store/order';

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async order(request: orderRequest): Promise<Order> {
		let path = '/store/order/{orderId}';

		path = path.replace('{orderId}', request.orderId.toString());

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async user(request: userRequest): Promise<void> {
		const path = '/user';

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async createWithArray(request: createWithArrayRequest): Promise<void> {
		const path = '/user/createWithArray';

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async createWithList(request: createWithListRequest): Promise<void> {
		const path = '/user/createWithList';

		return Axios.request({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async login(request: loginRequest): Promise<string> {
		const path = '/user/login';

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {
				username: request.username,
				password: request.password,
			},
		});
	}

	public async logout(): Promise<void> {
		const path = '/user/logout';

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,
		});
	}

	public async user(request: userRequest): Promise<User> {
		let path = '/user/{username}';

		path = path.replace('{username}', request.username.toString());

		return Axios.request({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}/\${path}\`,

			headers: {},

			params: {},
		});
	}
}
"
`;
