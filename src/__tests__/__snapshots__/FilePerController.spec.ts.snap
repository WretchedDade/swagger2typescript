// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`File per controller generation should produce the correct output: Index Content 1`] = `
"import Pet from './Pet';
import Store from './Store';
import User from './User';

export { Pet, Store, User };
"
`;

exports[`File per controller generation should produce the correct output: Models Content 1`] = `
"/// This file is generated. Do not edit it directly.

//#region Additional Models
//#endregion Additional Models

//#region Models
interface Order {
	id?: number;
	petId?: number;
	quantity?: number;
	shipDate?: string;
	status?: string;
	complete?: boolean;
}

interface Category {
	id?: number;
	name?: string;
}

interface User {
	id?: number;
	username?: string;
	firstName?: string;
	lastName?: string;
	email?: string;
	password?: string;
	phone?: string;
	userStatus?: number;
}

interface Tag {
	id?: number;
	name?: string;
}

interface Pet {
	id?: number;
	category?: Category;
	name: string;
	photoUrls: Array<string>;
	tags?: Array<Tag>;
	status?: string;
}

interface ApiResponse {
	code?: number;
	type?: string;
	message?: string;
}

//#endregion Models

//#region Parameter Objects
interface addPetRequest {
	body: Pet;
}

interface updatePetRequest {
	body: Pet;
}

interface findPetsByStatusRequest {
	status: Array<string>;
}

interface findPetsByTagsRequest {
	tags: Array<string>;
}

interface getPetByIdRequest {
	petId: number;
}

interface updatePetWithFormRequest {
	petId: number;
	name?: string;
	status?: string;
}

interface deletePetRequest {
	api_key?: string;
	petId: number;
}

interface uploadFileRequest {
	petId: number;
	additionalMetadata?: string;
	file?: file;
}

interface placeOrderRequest {
	body: Order;
}

interface getOrderByIdRequest {
	orderId: number;
}

interface deleteOrderRequest {
	orderId: number;
}

interface createUserRequest {
	body: User;
}

interface createUsersWithArrayInputRequest {
	body: Array<User>;
}

interface createUsersWithListInputRequest {
	body: Array<User>;
}

interface loginUserRequest {
	username: string;
	password: string;
}

interface getUserByNameRequest {
	username: string;
}

interface updateUserRequest {
	body: User;

	username: string;
}

interface deleteUserRequest {
	username: string;
}

//#endregion Parameters Objects
"
`;

exports[`File per controller generation should produce the correct output: Pet Content 1`] = `
"import Axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

export default class Pet {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(config: AxiosRequestConfig = {}) {
		const baseUrl = process.env.API_BASE_URL ?? '';

		this.baseUrl = baseUrl;
		this.config = config;
	}

	public async addPet(request: addPetRequest): Promise<AxiosResponse<void>> {
		const path = '/pet';

		return Axios.request<void>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async updatePet(request: updatePetRequest): Promise<AxiosResponse<void>> {
		const path = '/pet';

		return Axios.request<void>({
			...this.config,

			method: 'PUT',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async findPetsByStatus(request: findPetsByStatusRequest): Promise<AxiosResponse<Array<Pet>>> {
		const path = '/pet/findByStatus';

		return Axios.request<Array<Pet>>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {
				status: request.status,
			},
		});
	}

	public async findPetsByTags(request: findPetsByTagsRequest): Promise<AxiosResponse<Array<Pet>>> {
		const path = '/pet/findByTags';

		return Axios.request<Array<Pet>>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {
				tags: request.tags,
			},
		});
	}

	public async getPetById(request: getPetByIdRequest): Promise<AxiosResponse<Pet>> {
		let path = '/pet/{petId}';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request<Pet>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async updatePetWithForm(request: updatePetWithFormRequest): Promise<AxiosResponse<void>> {
		let path = '/pet/{petId}';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request<void>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async deletePet(request: deletePetRequest): Promise<AxiosResponse<void>> {
		let path = '/pet/{petId}';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request<void>({
			...this.config,

			method: 'DELETE',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {
				api_key: request?.api_key,
			},

			params: {},
		});
	}

	public async uploadFile(request: uploadFileRequest): Promise<AxiosResponse<ApiResponse>> {
		let path = '/pet/{petId}/uploadImage';

		path = path.replace('{petId}', request.petId.toString());

		return Axios.request<ApiResponse>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}
}
"
`;

exports[`File per controller generation should produce the correct output: Store Content 1`] = `
"import Axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

export default class Store {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(config: AxiosRequestConfig = {}) {
		const baseUrl = process.env.API_BASE_URL ?? '';

		this.baseUrl = baseUrl;
		this.config = config;
	}

	public async getInventory(): Promise<AxiosResponse<object>> {
		const path = '/store/inventory';

		return Axios.request<object>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,
		});
	}

	public async placeOrder(request: placeOrderRequest): Promise<AxiosResponse<Order>> {
		const path = '/store/order';

		return Axios.request<Order>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async getOrderById(request: getOrderByIdRequest): Promise<AxiosResponse<Order>> {
		let path = '/store/order/{orderId}';

		path = path.replace('{orderId}', request.orderId.toString());

		return Axios.request<Order>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async deleteOrder(request: deleteOrderRequest): Promise<AxiosResponse<void>> {
		let path = '/store/order/{orderId}';

		path = path.replace('{orderId}', request.orderId.toString());

		return Axios.request<void>({
			...this.config,

			method: 'DELETE',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}
}
"
`;

exports[`File per controller generation should produce the correct output: User Content 1`] = `
"import Axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

export default class User {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(config: AxiosRequestConfig = {}) {
		const baseUrl = process.env.API_BASE_URL ?? '';

		this.baseUrl = baseUrl;
		this.config = config;
	}

	public async createUser(request: createUserRequest): Promise<AxiosResponse<void>> {
		const path = '/user';

		return Axios.request<void>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async createUsersWithArrayInput(request: createUsersWithArrayInputRequest): Promise<AxiosResponse<void>> {
		const path = '/user/createWithArray';

		return Axios.request<void>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async createUsersWithListInput(request: createUsersWithListInputRequest): Promise<AxiosResponse<void>> {
		const path = '/user/createWithList';

		return Axios.request<void>({
			...this.config,

			method: 'POST',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async loginUser(request: loginUserRequest): Promise<AxiosResponse<string>> {
		const path = '/user/login';

		return Axios.request<string>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {
				username: request.username,
				password: request.password,
			},
		});
	}

	public async logoutUser(): Promise<AxiosResponse<void>> {
		const path = '/user/logout';

		return Axios.request<void>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,
		});
	}

	public async getUserByName(request: getUserByNameRequest): Promise<AxiosResponse<User>> {
		let path = '/user/{username}';

		path = path.replace('{username}', request.username.toString());

		return Axios.request<User>({
			...this.config,

			method: 'GET',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}

	public async updateUser(request: updateUserRequest): Promise<AxiosResponse<void>> {
		let path = '/user/{username}';

		path = path.replace('{username}', request.username.toString());

		return Axios.request<void>({
			...this.config,

			method: 'PUT',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},

			data: request.body,
		});
	}

	public async deleteUser(request: deleteUserRequest): Promise<AxiosResponse<void>> {
		let path = '/user/{username}';

		path = path.replace('{username}', request.username.toString());

		return Axios.request<void>({
			...this.config,

			method: 'DELETE',

			url: \`\${this.baseUrl}\${path}\`,

			headers: {},

			params: {},
		});
	}
}
"
`;
