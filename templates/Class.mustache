import Axios, { AxiosRequestConfig } from 'axios';

{{#imports.all}}
{{&.}}
{{/imports.all}}

{{#imports.singleFile}}
{{&.}}
{{/imports.singleFile}}


export default class {{name}} {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(baseUrl: string, config: AxiosRequestConfig = {}) {
		this.baseUrl = baseUrl;
		this.config = config;
	}
    {{#methods}}

    public async {{name}}({{#hasParameters}}request: {{name}}Request{{/hasParameters}}){{#successResponse}}: Promise<{{&type}}>{{/successResponse}} {

        let path = '{{&fullPath}}';
        let headers: Headers = {};
        let queryParameters: QueryParameters = {};

        {{#hasParameters}}
            {{#parameters.path}}
            path = path.replace('{{#WrapInCurlyBrackets}}{{name}}{{/WrapInCurlyBrackets}}', request.{{name}}.toString());
            {{/parameters.path}}

            {{#parameters.query}}
            queryParameters['{{name}}'] = request{{^required}}?{{/required}}.{{name}};
            {{/parameters.query}}

            {{#parameters.headers}}
            headers['{{name}}'] = request{{^required}}?{{/required}}.{{name}}
            {{/parameters.headers}}
        {{/hasParameters}}

        return Axios.request({
            ...this.config,

            headers,
            params: queryParameters,
            url: `${this.baseUrl}/${path}`
            
            {{#requestBody}},data: request.body{{/requestBody}}
        })
    }
    {{/methods}}
}