import Axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

{{#imports}}
{{&.}}
{{/imports}}

export default class {{name}} {
	private readonly baseUrl: string;
	private readonly config: AxiosRequestConfig;

	constructor(config: AxiosRequestConfig = {}) {
        const baseUrl = process.env.{{&baseUrl}};

        if (baseUrl === undefined)
            throw new Error(`Cannot construct a ${{#WrapInCurlyBrackets}}{{name}}{{/WrapInCurlyBrackets}} because process.env.{{&baseUrl}} is undefined`);

		this.baseUrl = baseUrl;
		this.config = config;
	}
    {{#methods}}

    public async {{name}}({{#hasParameters}}request: {{name}}{{parameterObjectSuffix}}{{/hasParameters}}){{#successResponse}}: Promise<AxiosResponse<{{&type}}>>{{/successResponse}} {
        {{#hasPathParameters}}let{{/hasPathParameters}}{{^hasPathParameters}}const{{/hasPathParameters}} path = '{{&fullPath}}';

        {{#hasParameters}}
            {{#parameters.path}}
            path = path.replace('{{#WrapInCurlyBrackets}}{{name}}{{/WrapInCurlyBrackets}}', request.{{name}}.toString());
            {{/parameters.path}}
        {{/hasParameters}}

        return Axios.request<{{#successResponse}}{{&type}}{{/successResponse}}>({
            ...this.config,

            method: "{{#UpperCase}}{{httpMethod}}{{/UpperCase}}",

            url: `${this.baseUrl}/${path}`,
            
            {{#hasParameters}}
            headers: {
            {{#parameters.headers}}
                {{name}}: request{{^required}}?{{/required}}.{{name}},
            {{/parameters.headers}}
            },

            params: {
            {{#parameters.query}}
                {{name}}: request{{^required}}?{{/required}}.{{name}},
            {{/parameters.query}}
            }
            {{/hasParameters}}
            
            {{#requestBody}},data: request.body{{/requestBody}}
        })
    }
    {{/methods}}
}